struct = require("struct")

local c = string.char

local tests = {
	-- floats
	{ raw = c(0x00, 0x00, 0x00, 0x00); format = "< f4"; val = 0.0; },
	{ raw = c(0x00, 0x00, 0x80, 0x3f); format = "< f4"; val = 1.0; },
	{ raw = c(0x00, 0x00, 0x80, 0xbf); format = "< f4"; val = -1.0; },
	{ raw = c(0x00, 0x00, 0x80, 0x7f); format = "< f4"; val = math.huge; },
	{ raw = c(0x00, 0x00, 0x80, 0xff); format = "< f4"; val = -math.huge; },
	{ raw = c(0x00, 0x00, 0xc0, 0x7f); format = "< f4"; val = 0/0; test = function(v) return v ~= v end},
	{ raw = c(0x00, 0x00, 0xc0, 0xff); format = "< f4"; val = 0/0; test = function(v) return v ~= v end },
	-- doubles
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00); format = "< f8"; val = 0.0; },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f); format = "< f8"; val = 1.0; },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf); format = "< f8"; val = -1.0; },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f); format = "< f8"; val = math.huge; },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff); format = "< f8"; val = -math.huge; },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f); format = "< f8"; val = 0/0; test = function(v) return v ~= v end },
	{ raw = c(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff); format = "< f8"; val = 0/0; test = function(v) return v ~= v end },
}

function od(str)
	return str:gsub('.', function(c) return string.format("%02X ", c:byte()) end)
end

function check(test)
	local val, pass, raw

	val = struct.unpack(test.raw, test.format)[1]
	pass = test.test
		and test.test(val)
		or val == test.val
	print(od(test.raw), "->", val, pass and "PASS" or "FAIL", pass and "" or "("..test.val..")")

	raw = struct.pack(test.format, {val})
	pass = raw == test.raw
	print(od(raw), "<-", val, pass and "PASS" or "FAIL", pass and "" or "!!")
end

for i,test in ipairs(tests) do
	check(test)
end
